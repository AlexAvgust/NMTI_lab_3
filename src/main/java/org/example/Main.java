package org.example;

import org.example.lab3.Parceptron;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import org.example.lab3.util.AlphabetMapping;
public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(
                new InputStreamReader(System.in));
        final int maxEpochs = 2000;
        int n = 20;

        Parceptron classifier = new Parceptron(n);

        double[][] trainX = {
                { 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // A
                { 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –ë
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, // B
                { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, // –≥
                { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, // “ê
                { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, // –î
                { 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –ï
                { 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –Ñ
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 }, // –ñ
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, // –ó
                { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –ò
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –Ü
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, // –á
                { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, // –ô
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, // –ö
                { 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, // –õ
                { 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, // –ú
                { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –ù
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –û
                { 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –ü
                { 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –†
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –°
                { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –¢
                { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, // –£
                { 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –§
                { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, // –•
                { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –¶
                { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –ß
                { 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –®
                { 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –©
                { 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }, // –¨
                { 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –Æ
                { 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, // –Ø
        };

        int[] trainT = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0,
                0 };
        System.out.println("Enter your letter");

        String userLetter = reader.readLine().toUpperCase();

        AlphabetMapping mapping = new AlphabetMapping();

        int index = mapping.getIndex(userLetter);

        trainT[index] = 1;

        classifier.train(trainX, trainT, maxEpochs);

        int indexOfPredictedLetter = 0;
        for (int i = 0; i < trainX.length; i++) {
            int predict = classifier.predict(trainX[i]);
            if (predict == 1) {
                indexOfPredictedLetter = i;

            }
        }
        String letter = mapping.getLetter(indexOfPredictedLetter);

        System.out.println("Your prediction is letter: " + letter);
    }
}

// { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, //
// 0- top straight horizontal line(‚Äæ)
// 1- straight horizontal line(-)
// 2- horizontal parallel 2 lines(=)
// 3- straight vertical line(|)
// 4- vertical parallel 2 lines(||)
// 5- Triple Vertical Bar (‚¶Ä)
// 6- right tilt(/)
// 7- left tilt(\)
// 8- right half of circle (‚óó)
// 9- left half of circle (ü§á)
// 10- Combining Left Angle Below(Ãö)
// 11- Combining right Angle Below(‚∏Ä)
// 12- right Angle(_|)
// 13- two dots(‚Ä¢‚Ä¢)
// 14- two vertical half of circles (like in 3)
// 15- half of the circle at the top(‚ó°)
// 16- Combining a right angle from above(Íúö)
// 17- checkbox left(>)
// 18- checkbox right(<)
// 19- checkbox down(\/)

// –∫–æ–Ω'—é–Ω–∫—Ü—ñ—è, 2–Ü, –º—ñ–Ω—ñ–º—É–º,
// –¥–µ—Ç–µ–∫—Ç–æ—Ä 8
// double[][] trainX = {
// { 1, 1 },
// { 1, 0 },
// { 0, 1 },
// { 0, 0 }
// };

// int[] trainT = { 1, 0, 0, 0 };

// classifier.train(trainX, trainT, maxEpochs);

// double[] test = { 1, 1 };
// System.out.println(classifier.predict(test));
